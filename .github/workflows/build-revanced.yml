name: Build ReVanced YT

on:
  workflow_dispatch:  # Manual trigger
  schedule:
   - cron: '0 12 * * *'  # Daily build at 8:00 PM MYT (12:00 UTC)

permissions:
  contents: write

env:
  JAVA_VERSION: 21
  JAVA_DISTRIBUTION: 'zulu'
  ARCH: 'arm64-v8a'
  DOWNLOADS_DIR: 'downloads'
  KEYSTORE_NAME: 'yt-patched.keystore'
  TIMEZONE: 'Asia/Kuala_Lumpur'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history including tags

      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Make scripts executable
        run: chmod +x *.sh

      - name: Get ReVanced CLI version (Stable)
        id: get-stable-cli-version
        run: |
          VERSION=$(./get-stable-cli.sh --version-only)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Cache ReVanced CLI
        id: cache-cli
        uses: actions/cache@v4
        with:
          path: revanced-cli-*-all.jar
          key: revanced-cli-${{ steps.get-stable-cli-version.outputs.version }}

      - name: Download ReVanced CLI
        if: steps.cache-cli.outputs.cache-hit != 'true'
        run: |
          VERSION=$(./get-stable-cli.sh)
          echo "Downloaded CLI version: $VERSION"

      - name: Get Dev Patches version
        id: get-dev-patches-version
        run: |
          VERSION=$(./get-dev-rvp.sh --version-only)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Check if build is needed
        id: check-build-needed
        run: |
          # Fetch tags to make sure we have them
          git fetch --tags || echo "Failed to fetch tags"
          
          CURRENT_PATCH="${{ steps.get-dev-patches-version.outputs.version }}"
          echo "Current patch version: $CURRENT_PATCH"
          
          # Check if a tag with this patch version already exists
          EXISTING_TAG=$(git tag --sort=-version:refname | grep -E "_${CURRENT_PATCH}$" | head -1 || echo "")
          
          if [[ -n "$EXISTING_TAG" ]]; then
            echo "❌ Build aborted: Patch version $CURRENT_PATCH already exists as tag $EXISTING_TAG"
            echo "build_needed=false" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "✅ Build needed: New patch version $CURRENT_PATCH"
            echo "build_needed=true" >> $GITHUB_OUTPUT
          fi

      - name: Cache ReVanced Patches
        id: cache-patches
        uses: actions/cache@v4
        with:
          path: patches-*-dev.*.rvp
          key: revanced-patches-${{ steps.get-dev-patches-version.outputs.version }}

      - name: Download ReVanced Patches
        if: steps.cache-patches.outputs.cache-hit != 'true'
        run: |
          VERSION=$(./get-dev-rvp.sh)
          echo "Downloaded patches version: $VERSION"

      - name: Get APKMirror Downloader version
        id: get-apkmd-version
        run: |
          VERSION=$(./get-apkmd.sh --version-only)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Cache APKMirror Downloader
        id: cache-apkmd
        uses: actions/cache@v4
        with:
          path: apkmd
          key: apkmd-${{ steps.get-apkmd-version.outputs.version }}

      - name: Download APKMirror Downloader
        if: steps.cache-apkmd.outputs.cache-hit != 'true'
        run: |
          VERSION=$(./get-apkmd.sh)
          echo "Downloaded APKMirror Downloader version: $VERSION"

      - name: Determine YT Version
        id: yt-version
        run: |
          VERSION=$(./fetch-yt-ver.sh)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get last release tag and extract patch version
        id: get-last-patch
        run: |
          # Fetch tags to make sure we have them
          git fetch --tags || echo "Failed to fetch tags"
          
          # Debug: Show git status and available tags
          echo "=== Git Status ==="
          git status --porcelain
          echo "=== All tags (sorted) ==="
          git tag --sort=-version:refname || echo "No tags found"
          echo "=== Last 5 tags ==="
          git tag --sort=-version:refname | head -5 || echo "No tags found"
          
          # Get current patch version for comparison
          CURRENT_PATCH="${{ steps.get-dev-patches-version.outputs.version }}"
          echo "=== Current patch version: $CURRENT_PATCH ==="
          
          # Get tags that match the new format (v<yt_version>_<patch_version>)
          MATCHING_TAGS=$(git tag --sort=-version:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+_[0-9]+\.[0-9]+\.[0-9]+" || echo "")
          echo "=== Matching tags (new format): ==="
          echo "$MATCHING_TAGS"
          
          # Find the most recent tag that has a different patch version than current
          LAST_TAG="none"
          if [[ -n "$MATCHING_TAGS" ]]; then
            while IFS= read -r tag; do
              if [[ -n "$tag" ]]; then
                # Extract patch version from this tag (everything after the underscore)
                TAG_PATCH_VERSION=$(echo "$tag" | sed -n 's/^v[0-9]\+\.[0-9]\+\.[0-9]\+_\(.*\)/\1/p')
                
                echo "Tag: $tag -> Patch: $TAG_PATCH_VERSION"
                
                # If this tag's patch version is different from current, use it
                if [[ "$TAG_PATCH_VERSION" != "$CURRENT_PATCH" ]]; then
                  LAST_TAG="$tag"
                  LAST_PATCH_VERSION="$TAG_PATCH_VERSION"
                  break
                fi
              fi
            done <<< "$MATCHING_TAGS"
          fi
          
          echo "=== Selected last tag: $LAST_TAG ==="
          echo "=== Last patch version: $LAST_PATCH_VERSION ==="
          
          echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT
          
          if [[ "$LAST_TAG" != "none" ]]; then
            echo "last_patch_version=$LAST_PATCH_VERSION" >> $GITHUB_OUTPUT
          else
            echo "=== No previous tags found with different patch version ==="
            echo "last_patch_version=none" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog URL
        id: generate-changelog
        run: |
          LAST_PATCH="${{ steps.get-last-patch.outputs.last_patch_version }}"
          CURRENT_PATCH="${{ steps.get-dev-patches-version.outputs.version }}"
          
          if [[ "$LAST_PATCH" != "none" && "$LAST_PATCH" != "$CURRENT_PATCH" ]]; then
            CHANGELOG_URL="https://github.com/ReVanced/revanced-patches/compare/v${LAST_PATCH}...v${CURRENT_PATCH}"
            echo "url=$CHANGELOG_URL" >> $GITHUB_OUTPUT
            echo "has_changelog=true" >> $GITHUB_OUTPUT
          else
            echo "has_changelog=false" >> $GITHUB_OUTPUT
          fi

      - name: Cache YT APK 
        id: cache-apk
        uses: actions/cache@v4
        with: 
          path: ${{ env.DOWNLOADS_DIR }}/yt-${{ steps.yt-version.outputs.version }}.apk
          key: ${{ steps.yt-version.outputs.version }}

      - name: Download YT APK
        if: steps.cache-apk.outputs.cache-hit != 'true'
        run: |
          VERSION="${{ steps.yt-version.outputs.version }}"
          # Download universal APK
          cat <<EOF > apps.json
          {
            "options": {
              "arch": "${{ env.ARCH }}",
              "outDir": "${{ env.DOWNLOADS_DIR }}"
            },
            "apps": [
              {
                "org": "google-inc",
                "repo": "youtube",
                "outFile": "yt-${VERSION}",
                "version": "$VERSION"
              }
            ]
          }
          EOF
          ./apkmd apps.json

      - name: Cache ReVanced keystore
        id: cache-keystore
        uses: actions/cache@v4
        with:
          path: ${{ env.KEYSTORE_NAME }}
          key: ${{ env.KEYSTORE_NAME }}

      - name: Set output filename
        id: set-filename
        run: |
          FILENAME="yt_${{ steps.yt-version.outputs.version }}_${{ steps.get-dev-patches-version.outputs.version }}-patched.apk"
          echo "filename=$FILENAME" >> $GITHUB_OUTPUT

      - name: Patch YT APK and generate keystore
        if: steps.cache-keystore.outputs.cache-hit != 'true'
        run: |
            java -jar revanced-cli-*-all.jar patch -p patches-*-dev.*.rvp ${{ env.DOWNLOADS_DIR }}/yt-*.apk -o "${{ steps.set-filename.outputs.filename }}"
            mv yt-*-patched.keystore ${{ env.KEYSTORE_NAME }}

      - name: Patch YT APK and use cached keystore
        if: steps.cache-keystore.outputs.cache-hit == 'true'
        run: |
            java -jar revanced-cli-*-all.jar patch -p patches-*-dev.*.rvp ${{ env.DOWNLOADS_DIR }}/yt-*.apk --keystore ${{ env.KEYSTORE_NAME }} -o "${{ steps.set-filename.outputs.filename }}"

      - name: Generate APKmirror url
        id: generate-apkmirror-url
        run: |
          # Set the version
          version=${{ steps.yt-version.outputs.version }}

          # Replace dots with dashes
          version_dash="${version//./-}"

          # Construct the URL
          URL="https://www.apkmirror.com/apk/google-inc/youtube/youtube-${version_dash}-release/youtube-${version_dash}-2-android-apk-download/#safeDownload"

          # Output the URL
          echo "$URL"
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Generate build information
        run: |
          YT_VERSION="${{ steps.yt-version.outputs.version }}"
          CLI_VERSION="${{ steps.get-stable-cli-version.outputs.version }}"
          PATCHES_VERSION="${{ steps.get-dev-patches-version.outputs.version }}"
          URL="${{ steps.generate-apkmirror-url.outputs.url }}"
          FILENAME="${{ steps.set-filename.outputs.filename }}"
          ORIGINAL_APK="${{ env.DOWNLOADS_DIR }}/yt-${YT_VERSION}.apk"
          HAS_CHANGELOG="${{ steps.generate-changelog.outputs.has_changelog }}"
          CHANGELOG_URL="${{ steps.generate-changelog.outputs.url }}"
          
          # Generate changelog section if available
          CHANGELOG_SECTION=""
          if [[ "$HAS_CHANGELOG" == "true" ]]; then
            CHANGELOG_SECTION="
          - **📝 Changelog**: [View changes]($CHANGELOG_URL)"
          fi
          
          cat <<EOF > yt-revanced-info.md
          ## 💡 ReVanced YT Build Information

          - **📺 YT Version**: \`${YT_VERSION}\` [SHA-256]($URL)
          - **📦 APK Filename**: \`${FILENAME}\`
          - **🧩 ReVanced Patches Version**: \`${PATCHES_VERSION}\`
          - **🔨 ReVanced CLI Version**: \`${CLI_VERSION}\`$CHANGELOG_SECTION
          - **📅 Build Date**: \`$(TZ=${{ env.TIMEZONE }} date +%Y-%m-%d)\` \`$(TZ=${{ env.TIMEZONE }} date +%H:%M:%S%:z)\`

          -----
          ### 🔐 APK file hashes 

          | SHA-256 Checksum | Filename |
          |-----------------|----------|
          | \`$(sha256sum ${FILENAME} | awk '{print $1}')\` | ${FILENAME} |
          | \`$(sha256sum ${ORIGINAL_APK} | awk '{print $1}')\` | yt-${YT_VERSION}.apk (original) |
          EOF

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          name: "📺 YT ${{ steps.yt-version.outputs.version }} | 🧩 ${{ steps.get-dev-patches-version.outputs.version }}"
          tag_name: v${{ steps.get-dev-patches-version.outputs.version }}
          body_path: yt-revanced-info.md
          files: |
            ${{ steps.set-filename.outputs.filename }}
            ${{ env.KEYSTORE_NAME }}
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}